/*
This file is for your main application CSS.

This CSS will not leak into the shadow DOM for custom elements. Use element
styles plus theme variables to customize them instead.

To customize common variables, see variables.css. For theme-specific changes,
use theme-dark.css or theme-light.css.
 */
@import url("./variables.css");
@import url("./components/index.css");

* {
  box-sizing: border-box;
}

body {
  display: flex;
  flex-flow: column nowrap;
  background-color: var(--background-primary);
  color: var(--text-normal);
  padding: 0;
  margin: 0;
  font-family: var(--font-family);
  a {
    color: var(--link);
    &:hover {
      color: var(--link-hover);
      &:visited {
        color: var(--link-hover-visited);
      }
    }
    &:visited {
      color: var(--link-visited);
    }
  }

  min-height: 100vh;
  & > header {
    flex: 0 1 auto;
  }
  & > main {
    flex: 1 1 auto;
    display: flex;
    flex-flow: column nowrap;
    padding: 0 1rem;
    /* Link styling, from https://css-tricks.com/css-link-hover-effects/ */
    a {
      text-decoration: none;
      position: relative;
      font-weight: var(--font-semibold);
      color: var(--text-strong);
      &:hover::before {
        bottom: 0;
        height: 100%;
        color: var(--text-accent);
      }
      &::before {
        content: '';
        background-color: var(--background-accent);
        position: absolute;
        left: 0;
        bottom: -.1rem;
        width: 100%;
        height: 50%;
        z-index: -1;
        transition: all .3s ease-in-out;
      }
    }
    &.sidebar {
      padding: 0;
    }
  }
  & > footer {
    flex: 0 1 auto;
  }
}


/*
Some fun view transition stuff. See
https://developer.mozilla.org/en-US/docs/Web/API/View_Transitions_API/Using
*/
@view-transition {
  navigation: auto;
}

/*
TODO(@zkat): do this in JS so we can change direction based on what kind of
nav we're doing.

TODO(@zkat): revisit this after we figure out why the transition config is
making the nav overlay transparent. (???)

@keyframes move-out {
  from {
    transform: translateX(0%);
  }
  to {
    transform: translateX(-100%);
  }
}
@keyframes move-in {
  from {
    transform: translateX(100%);
  }
  to {
    transform: translateX(0%);
  }
}
header.site-header {
  view-transition-name: header-transition;
}
main {
  view-transition-name: main-transition;
}
footer.site-footer {
  view-transition-name: footer-transition;
}
::view-transition-group(root),
::view-transition-old(root),
::view-transition-new(root) {
}
::view-transition-group(header-transition),
::view-transition-old(header-transition),
::view-transition-new(header-transition) {
}
::view-transition-group(footer-transition),
::view-transition-old(footer-transition),
::view-transition-new(footer-transition) {
}
::view-transition-group(main-transition) {
}
::view-transition-old(main-transition) {
  animation: 0.2s ease-in both move-out;
}
::view-transition-new(main-transition) {
  animation: 0.2s ease-in both move-in;
}
*/
